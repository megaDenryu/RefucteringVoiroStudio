from typing import Literal
from pydantic import BaseModel,Field

class AssociationNode1(BaseModel):
    """
    創造的連想フローにおける単一の要素（アイデア、イメージ、問いかけ等）を表します。
    連想が連鎖したり分岐したりする構造を表現できます。
    """
    a連想内容: str = Field(description="連想された具体的な内容（文章、キーワード、イメージの説明など）")
    b種類: Literal["イメージ", "記憶", "アイデア", "言葉", "問いかけ", "感情", "もしも", "比喩", "感覚", "未定義"] = Field(description="連想内容の性質を示すタグ")
    c付随感情メモ: str = Field(description="この連想が引き起こした感情や、キャラクターの短いコメント（例：「懐かしい感じ」「なんだこれ？」）")
  
class AssociationNode2(BaseModel):
    """
    創造的連想フローにおける単一の要素（アイデア、イメージ、問いかけ等）を表します。
    連想が連鎖したり分岐したりする構造を表現できます。
    """
    a連想内容: str = Field(description="連想された具体的な内容（文章、キーワード、イメージの説明など）")
    b種類: Literal["イメージ", "記憶", "アイデア", "言葉", "問いかけ", "感情", "もしも", "比喩", "感覚", "未定義"] = Field(description="連想内容の性質を示すタグ")
    c派生連想: list["AssociationNode1"] = Field(description="この連想からさらに派生した連想のリスト（思考の分岐や深掘り）")
    d付随感情メモ: str = Field(description="この連想が引き起こした感情や、キャラクターの短いコメント（例：「懐かしい感じ」「なんだこれ？」）")

class AssociationNode3(BaseModel):
    """
    創造的連想フローにおける単一の要素（アイデア、イメージ、問いかけ等）を表します。
    連想が連鎖したり分岐したりする構造を表現できます。
    """
    a連想内容: str = Field(description="連想された具体的な内容（文章、キーワード、イメージの説明など）")
    b種類: Literal["イメージ", "記憶", "アイデア", "言葉", "問いかけ", "感情", "もしも", "比喩", "感覚", "未定義"] = Field(description="連想内容の性質を示すタグ")
    c派生連想: list["AssociationNode2"] = Field(description="この連想からさらに派生した連想のリスト（思考の分岐や深掘り）")
    d付随感情メモ: str = Field(description="この連想が引き起こした感情や、キャラクターの短いコメント（例：「懐かしい感じ」「なんだこれ？」）")

class AssociationNode4(BaseModel):
    """
    創造的連想フローにおける単一の要素（アイデア、イメージ、問いかけ等）を表します。
    連想が連鎖したり分岐したりする構造を表現できます。
    """
    a連想内容: str = Field(description="連想された具体的な内容（文章、キーワード、イメージの説明など）")
    b種類: Literal["イメージ", "記憶", "アイデア", "言葉", "問いかけ", "感情", "もしも", "比喩", "感覚", "未定義"] = Field(description="連想内容の性質を示すタグ")
    c派生連想: list["AssociationNode3"] = Field(description="この連想からさらに派生した連想のリスト（思考の分岐や深掘り）")
    d付随感情メモ: str = Field(description="この連想が引き起こした感情や、キャラクターの短いコメント（例：「懐かしい感じ」「なんだこれ？」）")

class AssociationNode5(BaseModel):
    """
    創造的連想フローにおける単一の要素（アイデア、イメージ、問いかけ等）を表します。
    連想が連鎖したり分岐したりする構造を表現できます。
    """
    a連想内容: str = Field(description="連想された具体的な内容（文章、キーワード、イメージの説明など）")
    b種類: Literal["イメージ", "記憶", "アイデア", "言葉", "問いかけ", "感情", "もしも", "比喩", "感覚", "未定義"] = Field(description="連想内容の性質を示すタグ")
    c派生連想: list["AssociationNode4"] = Field(description="この連想からさらに派生した連想のリスト（思考の分岐や深掘り）")
    d付随感情メモ: str = Field(description="この連想が引き起こした感情や、キャラクターの短いコメント（例：「懐かしい感じ」「なんだこれ？」）")

class CreativeAssociationOutput(BaseModel):
    """
    創造的連想モードの出力。連想のフローやクラスターを構造化して保持します。
    """
    連想フロー: list[AssociationNode5] = Field(description="生成された連想の主要な流れ、または複数の連想の開始点のリスト")

# --- モデルの使用例（イメージ） ---
# LLMへの指示（プロンプトの一部）
"""
# (状況、キャラクター設定、思考履歴は省略)

# 指示
(上記の改善案指示文をここに挿入)

# JSONスキーマ
{CreativeAssociationOutput.model_json_schema(indent=2)}
"""

# --- LLMからの期待される出力例（JSON） ---
"""
{
  "連想フロー": [
    {
      "連想内容": "雨の日の窓についた水滴",
      "種類": "イメージ",
      "派生連想": [
        {
          "連想内容": "子供の頃、窓に絵を描いた記憶",
          "種類": "記憶",
          "派生連想": null,
          "付随感情メモ": "ちょっと懐かしい"
        },
        {
          "連想内容": "水滴が集まって流れ落ちる様子",
          "種類": "イメージ",
          "派生連想": [
            {
              "連想内容": "涙みたいだ",
              "種類": "比喩",
              "派生連想": [
                {
                    "連想内容": "最近、なんで泣きたくなるんだろう？",
                    "種類": "問いかけ",
                    "派生連想": null,
                    "付随感情メモ": "少し感傷的"
                }
              ],
              "付随感情メモ": null
            }
          ],
          "付随感情メモ": null
        }
      ],
      "付随感情メモ": "雨音は落ち着く"
    },
    {
      "連想内容": "もしも、この雨がチョコレートだったら？",
      "種類": "もしも",
      "派生連想": [
        {
          "連想内容": "世界中が甘い香りに包まれる",
          "種類": "アイデア",
          "派生連想": null,
          "付随感情メモ": "面白そう！"
        },
        {
          "連想内容": "傘が役に立たなくなる",
          "種類": "アイデア",
          "派生連想": null,
          "付随感情メモ": "困るけど、ちょっと笑える"
        }
      ],
      "付随感情メモ": null
    }
  ]
}
"""
