from uuid import uuid4
from api.LLM.LLMAPIBase.LLMInterface.IMessageQuery import IMessageQuery
from api.LLM.エージェント.会話用エージェント.自立型Ver1.体.BrainModule.脳内思考プロセス.思考グラフ.アクション.アクショングラフ import アクショングラフ
from api.LLM.エージェント.会話用エージェント.自立型Ver1.体.BrainModule.脳内思考プロセス.思考グラフ.感情.感情担当 import 感情状態管理
from api.LLM.エージェント.会話用エージェント.自立型Ver1.体.BrainModule.脳内思考プロセス.思考グラフ.方針.方針策定llm import 方針策定LLM
from api.LLM.エージェント.会話用エージェント.自立型Ver1.体.BrainModule.脳内思考プロセス.思考グラフ.計画.計画 import 思考アクション計画する人
from api.LLM.エージェント.会話用エージェント.自立型Ver1.体.BrainModule.脳内思考プロセス.思考プロセス状態 import 思考状態
from api.LLM.エージェント.会話用エージェント.自立型Ver1.体.BrainModule.脳内思考プロセス.状況統合.状況オブジェクト import 状況
from api.LLM.エージェント.会話用エージェント.自立型Ver1.体を持つ者.I自分の情報 import I自分の情報コンテナ

"""
グラフとノードの関係をLLMで出力させ、グラフを構成する必要がある。
そして実行できる必要がある。
グラフノードはそれぞれLLMUnitを持ち、依存関係にないノードは同時に実行できるようにする。
流れとしては
1. グラフを表したjsonをLLMが出力して計画する
2. そのjsonをもとにすべてのノードを生成し、依存関係を解決する。つまりどのフェーズでどのノードを実行するか計算する。
3. その計算結果をもとに、各ノードを実行する。

ノードには種類があり、ノードの前後でつながり方に決まりがある。

タスクグラフのノードの中にさらに小さいサブグラフがあるという構造は意味不明になるのでいったんやらないようにする。
しかしそうするといったんタスクグラフを作ったあと、それをさらに延伸するとなったときどうするのか？つまり３まで行った後その先はどうするの？というのが決まってない。
ノードにはどんな種類があるか？
- 単発思考ノード：単発の思考を実行し結果を次のノードに渡す。
- しゃべるノード：しゃべるアクションを実行する（なので）
- 集約ノード：1個前の複数のノードからの結果を機械的にorLLMによって1つの文章にまとめて次のノードに送る
- 分岐ノード：llmによってn択から選択して次のノードに行く
- 計画ノード：
- 検索ノード：検索を行い、その結果を次のノードに送る
そもそもグラフjsonを作成しないでグラフを連鎖させるという方策はないのか？つまり長期的な計画ではなく、次何をするか？そもそも作業するわけれはなく会話するだけなのでそんな計画的に考える必要性がない。
例えば、
1. ○○という言葉に対して返答を１０個考え、そのあとの展開を予想し、もっともらしい返答を選択しろ。と指示すれば・・これはむしろタスクグラフだったか。。
2. 鉢とイルカの組み合わせの物語を自由に考えろ。だと、P1という文章を書いた後、次はどうするか？というのが問題になる。先にどういう工程で考えるかプログラムすることもできるが、
   つまり止めないためにはループか、再帰によって次のノードを作成する必要がある。
分岐がなかったとしても計画→思考→計画→思考→・・というように、思考のあと、たんじゅんに「次どうするか？」という質問から計画を立てるだけで連鎖する。
つまり、計画とアクションという２つに大別できる。
それから並列でアクションを実行することについて問題がある。それは思考１と思考２が並列にじっこうされた後思考1からしゃべる1に行き、思考2からしゃべる2に行くとしゃべる1と2は情報共有が行われないまましゃべることになりおかしな言動になりうる。

思考アクションのグラフを作成することはあるが、そこにしゃべることは混ざらない。
計画→思考アクショングラフ実行→計画→しゃべる→計画→思考アクショングラフ実行→計画→思考アクショングラフ実行→計画→しゃべる→計画→・・というようにしゃべることは計画の中に入れない。
そしてこれは単眼的な思考アクションは実施できるが、そうではなく長期的な方針を立てることはできない。
これを実現するには計画の方針を作るということが必要になる。アクションはあくまで計画に依存するので長期方針は直接介入しない。方針は計画に介入することでアクションを変える。
計画は完遂可能なものを作るしそれは予測可能であることが必要である。一方方針は結果が決まってないものを踏まえて作るものである。
計画では常に今後の方針を考えることができる。
"""

class 思考グラフ部署:
    _v自分の情報:I自分の情報コンテナ
    _感情:感情状態管理
    _方針策定: 方針策定LLM
    _計画LLM:思考アクション計画する人
    _アクショングラフ:アクショングラフ


    
    def __init__(self, v自分の情報:I自分の情報コンテナ) -> None:
        self._v自分の情報 = v自分の情報
        self._感情 = 感情状態管理()
        self._方針策定 = 方針策定LLM()
        self._計画LLM = 思考アクション計画する人()
        self._アクショングラフ = アクショングラフ()


    def 思考を進める(self, 状況履歴: list[状況]) -> 思考状態:
        """
        与えられた状況履歴をもとに、次の思考を進める
        """
        方針クエリ:list[IMessageQuery] = [IMessageQuery(id=str(uuid4()), role="user", content=状況.リスト化文章(状況履歴))]
        # 計画を立てる
        計画 = self._計画LLM.計画を立てる(方針クエリ)
        # アクションを実行する
        結果 = self._アクショングラフ.アクションを実行する(計画)
        return 結果